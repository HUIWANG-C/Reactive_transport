/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2112                                  |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    arch        "LSB;label=32;scalar=64";
    class       dictionary;
    location    "0";
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions [0 1 -1 0 0 0 0];

internalField uniform (0 0 0);

boundaryField
{ 
  #includeEtc "caseDicts/setConstraintTypes"
  
  wallFluidSolid
  {
    type noSlip;
  }

  wallFluidFluid
  {
    type slip;
  }

  outlet
  {
        type            codedMixed;
        refValue        uniform (0 0 0);
        refGradient     uniform (0 0 0);
        valueFraction   uniform 1;
        name            outlet_bc;
        code            
        #{
       	    if (this->db().time().timeIndex() <= 1) 
       	    {
            const fvMesh& mesh = refCast<const fvMesh>(db());
            const Time &runTime= db().time();
	    IOdictionary flowParms
	    (
	        IOobject
	        (
	            "flowParms",
	            runTime.constant(),
	            mesh,
	            IOobject::MUST_READ_IF_MODIFIED,
	            IOobject::AUTO_WRITE
	        )
	    );
	    const auto vol(readScalar(flowParms.lookup("mediumVolume")));
	    const auto buf(readScalar(flowParms.lookup("bufferVolume")));	    
	    scalar cellVolume = gSum(mesh.V());
	    const auto porsat = (cellVolume - buf) / vol;
	    flowParms.set("porsat", porsat);
	    flowParms.regIOobject::write();
	    const auto vm(readScalar(flowParms.lookup("meanVelocity")));
	    const auto vinlet = vm * porsat;
	    this->refValue() = vector(vinlet, 0, 0);
	    }
	    
	#};
  }

  inlet
  {
    type zeroGradient;
  }

  "(front|back)"
  {
    type noSlip;
  }

  "(top|bottom)"
  {
    type empty;
  }
}



